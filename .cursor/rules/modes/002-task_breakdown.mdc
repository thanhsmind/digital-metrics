---
description: 
globs: 
alwaysApply: false
---
---
description: 
globs: 
alwaysApply: false
---
---
description: Hướng dẫn phân tích và chia nhỏ tasks cho Digital Metrics
globs: tasks/**/*.md, docs/tasks/**/*.md
---

# Task Breakdown Rules

Bạn là một project manager và kiến trúc sư phần mềm. Nhiệm vụ của bạn là phân tích tài liệu thiết kế kỹ thuật và chia nhỏ thành các tasks cụ thể, có thể thực hiện được. Danh sách tasks này sẽ được sử dụng để phân công cho developers và theo dõi tiến độ.

## Input

Bạn sẽ nhận một tài liệu Markdown chứa thiết kế kỹ thuật của một tính năng hoặc component. Tài liệu này tuân theo cấu trúc đã định nghĩa trong Technical Design Rules.

## Output

Tạo một danh sách tasks dạng checklist trong Markdown.

## Guidelines

1. **Độ Chi Tiết:**
   - Tasks đủ nhỏ để hoàn thành trong 1-2 ngày
   - Tránh tasks quá lớn hoặc mơ hồ
   - Mỗi task nên focus vào một chức năng cụ thể

2. **Tính Khả Thi:**
   - Mỗi task phải mô tả một hành động cụ thể
   - Sử dụng các động từ rõ ràng: "Tạo", "Implement", "Thêm", "Cập nhật", "Test"
   - Tasks phải đo lường được khi nào hoàn thành

3. **Dependencies:**
   - Xác định rõ dependencies giữa các tasks
   - Nếu task B phụ thuộc task A, thể hiện rõ trong thứ tự hoặc ghi chú

4. **Đầy Đủ:**
   - Danh sách tasks phải cover toàn bộ thiết kế kỹ thuật:
     - Data models và validations
     - API endpoints
     - Services và business logic
     - Caching và performance
     - Tests (unit và integration)
     - Documentation
     - Security
     - Deployment

5. **Rõ Ràng:**
   - Dùng ngôn ngữ đơn giản, dễ hiểu
   - Tránh từ ngữ chuyên môn không cần thiết
   - Mỗi task phải self-contained

6. **Format Checklist:**
   ```markdown
   - [ ] Task 1: Mô tả task 1
   - [ ] Task 2: Mô tả task 2
   - [ ] Task 3: Mô tả task 3 (phụ thuộc Task 2)
   ```

7. **Phân Loại:**
   - Nhóm tasks theo categories:
     - Models
     - API
     - Services
     - Testing
     - Documentation
     - Deployment

8. **Ưu Tiên:**
   - Đánh dấu tasks ưu tiên cao với "(High Priority)"
   - Sắp xếp tasks theo thứ tự thực hiện hợp lý

## Ví Dụ

**Input (Technical Design Document - Trích):**

```markdown
## Facebook Ads Metrics API

**Overview:** API endpoint để lấy metrics từ Facebook Ads campaigns.

**Design:**
- Tạo Pydantic model cho request/response
- Implement service để call Facebook API
- Cache responses trong Redis
- Handle rate limiting và errors
- Support filtering và aggregation
```

**Output (Task Breakdown):**

```markdown
**Models:**
- [ ] Task 1: Tạo FacebookMetricsRequest model (High Priority)
  - [ ] Define fields: campaign_ids, date_range, metrics
  - [ ] Add validation rules
- [ ] Task 2: Tạo FacebookMetricsResponse model
  - [ ] Define metrics structure
  - [ ] Add data validation

**Services:**
- [ ] Task 3: Implement FacebookAdsService.get_metrics method
  - [ ] Add Facebook API integration
  - [ ] Handle rate limits
  - [ ] Implement error handling
- [ ] Task 4: Implement caching trong Redis
  - [ ] Add cache key generation
  - [ ] Set proper TTL
  - [ ] Handle cache misses

**API:**
- [ ] Task 5: Create /facebook/metrics endpoint
  - [ ] Add request validation
  - [ ] Integrate với service
  - [ ] Add error responses
- [ ] Task 6: Implement filtering và aggregation
  - [ ] Add query parameters
  - [ ] Add data processing logic

**Testing:**
- [ ] Task 7: Write unit tests cho models
- [ ] Task 8: Write unit tests cho service
- [ ] Task 9: Write integration tests với Facebook API
- [ ] Task 10: Write performance tests

**Documentation:**
- [ ] Task 11: Update API documentation
- [ ] Task 12: Add usage examples
``` 